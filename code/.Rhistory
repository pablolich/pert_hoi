growth_rate = function(u, v, c, N){
return(N*(u*N/(v + N) - c*N))
}
u = 2; c = 0.1; v = 5
Nstar = u/c - v
N = seq(0, Nstar)
plot(N, growth_rate(u, v, c, N), lty = 'solid')
growth_rate = function(u, v, c, N){
return(N*(u*N/(v + N) - c*N))
}
u = 2; c = 0.1; v = 5
Nstar = u/c - v
N = seq(0, Nstar)
plot(N, growth_rate(u, v, c, N), type = 'l')
growth_rate = function(u, v, c, N){
return(N*(u*N/(v + N) - c*N))
}
u = 2; c = 0.1; v = 5
Nstar = u/c - v
N = seq(0, Nstar)
plot(N, growth_rate(u, v, c, N)/N, type = 'l')
growth_rate = function(u, v, c, N){
return(N*(u*N/(v + N) - c*N))
}
u = 2; c = 0.1; v = 5
Nstar = u/c - v
N = seq(0.1, Nstar, length.out = 1000)
plot(N, growth_rate(u, v, c, N)/N, type = 'l')
growth_rate = function(u, v, c, N){
return(N*(u*N/(v + N) - c*N))
}
u = 2; c = 0.1; v = 5
Nstar = u/c - v
N = seq(0.1, Nstar, length.out = 1000)
plot(N, growth_rate(u, v, c, N), type = 'l')
growth_rate_logistic = function(r, K, N){
return(r*N*(1-N/K))
}
growth_rate = function(u, v, c, N){
return(N*(u*N/(v + N) - c*N))
}
growth_rate_logistic = function(r, K, N){
return(r*N*(1-N/K))
}
u = 2; c = 0.1; v = 5
Nstar = u/c - v
N = seq(0.1, Nstar, length.out = 1000)
plot(N, growth_rate(u, v, c, N), type = 'l')
K = 100
r = 2
N_l = seq(0.1, K, length.out = 1000)
plot(N, growth_rate_logistic(r, K, N_l))
plot(N, growth_rate_logistic(r, K, N_l)/N)
plot(N, growth_rate_logistic(r, K, N_l)/N,
type = 'l')
growth_rate = function(u, v, c, N){
return(N*(u*N/(v + N) - c*N))
}
growth_rate_logistic = function(r, K, N){
return(r*N*(1-N/K))
}
u = 2; c = 0.1; v = 5
Nstar = u/c - v
N = seq(0.1, Nstar, length.out = 1000)
plot(N, growth_rate(u, v, c, N)/N, type = 'l')
K = 100
r = 2
N_l = seq(0.1, K, length.out = 1000)
plot(N, growth_rate_logistic(r, K, N_l)/N_l,
type = 'l')
library(dplyr)
# This function returns the values of the min and max
get_extrema <- function(vec){
# If the min of the vector equals the max, it is all one
# value (does not oscillate)
if (min(vec) == max(vec)) return(min(vec))
# An extrema has lower/higher values on both sides
extrema <- vec[(vec > lead(vec) & vec > lag(vec)) |
(vec < lead(vec) & vec < lag(vec))] %>%
na.omit() # remove any NA’s from the vector
# If there are no points that match this criteria, it
# has not yet converged, so just return the minimum value
if (length(extrema) == 0) return(min(vec))
# otherwise, return the vector of min/max values
return(extrema)
}
# This function creates a simulation of the logistic map
logistic_map <- function(N0, r, TimeSteps){
# initialize the trajectory vector and put in the first value
trajectory <- rep(0, TimeSteps)
trajectory[1] <- N0
# now step through the simulation, adding population
# densities based on the previous value
for (ii in 2:TimeSteps){
trajectory[ii] <- r * trajectory[ii-1] *
(1 - trajectory[ii-1])
}
return(trajectory)
}
ricker_model = function(N0, r, b, TimeSteps){
# initialize the trajectory vector and put in the first value
trajectory <- rep(0, TimeSteps)
trajectory[1] <- N0
for (ii in 2:TimeSteps){
trajectory[ii] <- r * trajectory[ii-1] *
exp(-b*trajectory[ii-1])
}
return(trajectory)
}
start_r <- 0.001
end_r <- 0.1
# Plot the Diagram (using base plotting because it is faster)
plot(0, 0, xlim=c(start_r-0.001, end_r+0.001),
ylim=c(-0.05,200), type="n", xlab="r", ylab="X")
# loop through some values for r
for (r in seq(start_r, end_r, 0.005)) {
# run the logistic map starting from an initial density
# of 0.5 and using the current growth rate
trajectory <- ricker_model(0.5, 20, r, 2500)
# just take the last tenth of the trajectory to find extrema
extrema <- trajectory %>%
tail(round(length(.) / 10)) %>%
get_extrema()
# plot one point for each extrema at the given growth rate
points(rep(r, length(extrema)), extrema, pch=".")
}
# The code plots all the maxima and minima of the timeseries once transient has
# elapsed. By doing this we are getting to know the behaviour of the model, since
# we are plotting how it responds after transient (invariably?, cyclicaly?,
# caotically?)
# For the ricker model we get chaos with r, and nothing interesting with b. b
# modulates the amplitude of chaos
library(dplyr)
# This function returns the values of the min and max
get_extrema <- function(vec){
# If the min of the vector equals the max, it is all one
# value (does not oscillate)
if (min(vec) == max(vec)) return(min(vec))
# An extrema has lower/higher values on both sides
extrema <- vec[(vec > lead(vec) & vec > lag(vec)) |
(vec < lead(vec) & vec < lag(vec))] %>%
na.omit() # remove any NA’s from the vector
# If there are no points that match this criteria, it
# has not yet converged, so just return the minimum value
if (length(extrema) == 0) return(min(vec))
# otherwise, return the vector of min/max values
return(extrema)
}
# This function creates a simulation of the logistic map
logistic_map <- function(N0, r, TimeSteps){
# initialize the trajectory vector and put in the first value
trajectory <- rep(0, TimeSteps)
trajectory[1] <- N0
# now step through the simulation, adding population
# densities based on the previous value
for (ii in 2:TimeSteps){
trajectory[ii] <- r * trajectory[ii-1] *
(1 - trajectory[ii-1])
}
return(trajectory)
}
ricker_model = function(N0, r, b, TimeSteps){
# initialize the trajectory vector and put in the first value
trajectory <- rep(0, TimeSteps)
trajectory[1] <- N0
for (ii in 2:TimeSteps){
trajectory[ii] <- r * trajectory[ii-1] *
exp(-b*trajectory[ii-1])
}
return(trajectory)
}
start_r <- 0.001
end_r <- 0.1
# Plot the Diagram (using base plotting because it is faster)
plot(0, 0, xlim=c(start_r-0.001, end_r+0.001),
ylim=c(-0.05,5), type="n", xlab="r", ylab="X")
# loop through some values for r
for (r in seq(start_r, end_r, 0.005)) {
# run the logistic map starting from an initial density
# of 0.5 and using the current growth rate
trajectory <- ricker_model(0.5, r, 1, 2500)
# just take the last tenth of the trajectory to find extrema
extrema <- trajectory %>%
tail(round(length(.) / 10)) %>%
get_extrema()
# plot one point for each extrema at the given growth rate
points(rep(r, length(extrema)), extrema, pch=".")
}
# The code plots all the maxima and minima of the timeseries once transient has
# elapsed. By doing this we are getting to know the behaviour of the model, since
# we are plotting how it responds after transient (invariably?, cyclicaly?,
# caotically?)
# For the ricker model we get chaos with r, and nothing interesting with b. b
# modulates the amplitude of chaos
library(dplyr)
# This function returns the values of the min and max
get_extrema <- function(vec){
# If the min of the vector equals the max, it is all one
# value (does not oscillate)
if (min(vec) == max(vec)) return(min(vec))
# An extrema has lower/higher values on both sides
extrema <- vec[(vec > lead(vec) & vec > lag(vec)) |
(vec < lead(vec) & vec < lag(vec))] %>%
na.omit() # remove any NA’s from the vector
# If there are no points that match this criteria, it
# has not yet converged, so just return the minimum value
if (length(extrema) == 0) return(min(vec))
# otherwise, return the vector of min/max values
return(extrema)
}
# This function creates a simulation of the logistic map
logistic_map <- function(N0, r, TimeSteps){
# initialize the trajectory vector and put in the first value
trajectory <- rep(0, TimeSteps)
trajectory[1] <- N0
# now step through the simulation, adding population
# densities based on the previous value
for (ii in 2:TimeSteps){
trajectory[ii] <- r * trajectory[ii-1] *
(1 - trajectory[ii-1])
}
return(trajectory)
}
ricker_model = function(N0, r, b, TimeSteps){
# initialize the trajectory vector and put in the first value
trajectory <- rep(0, TimeSteps)
trajectory[1] <- N0
for (ii in 2:TimeSteps){
trajectory[ii] <- r * trajectory[ii-1] *
exp(-b*trajectory[ii-1])
}
return(trajectory)
}
start_r <- 0.001
end_r <- 10
# Plot the Diagram (using base plotting because it is faster)
plot(0, 0, xlim=c(start_r-0.001, end_r+0.001),
ylim=c(-0.05,5), type="n", xlab="r", ylab="X")
# loop through some values for r
for (r in seq(start_r, end_r, 0.005)) {
# run the logistic map starting from an initial density
# of 0.5 and using the current growth rate
trajectory <- ricker_model(0.5, r, 1, 2500)
# just take the last tenth of the trajectory to find extrema
extrema <- trajectory %>%
tail(round(length(.) / 10)) %>%
get_extrema()
# plot one point for each extrema at the given growth rate
points(rep(r, length(extrema)), extrema, pch=".")
}
# The code plots all the maxima and minima of the timeseries once transient has
# elapsed. By doing this we are getting to know the behaviour of the model, since
# we are plotting how it responds after transient (invariably?, cyclicaly?,
# caotically?)
# For the ricker model we get chaos with r, and nothing interesting with b. b
# modulates the amplitude of chaos
library(dplyr)
# This function returns the values of the min and max
get_extrema <- function(vec){
# If the min of the vector equals the max, it is all one
# value (does not oscillate)
if (min(vec) == max(vec)) return(min(vec))
# An extrema has lower/higher values on both sides
extrema <- vec[(vec > lead(vec) & vec > lag(vec)) |
(vec < lead(vec) & vec < lag(vec))] %>%
na.omit() # remove any NA’s from the vector
# If there are no points that match this criteria, it
# has not yet converged, so just return the minimum value
if (length(extrema) == 0) return(min(vec))
# otherwise, return the vector of min/max values
return(extrema)
}
# This function creates a simulation of the logistic map
logistic_map <- function(N0, r, TimeSteps){
# initialize the trajectory vector and put in the first value
trajectory <- rep(0, TimeSteps)
trajectory[1] <- N0
# now step through the simulation, adding population
# densities based on the previous value
for (ii in 2:TimeSteps){
trajectory[ii] <- r * trajectory[ii-1] *
(1 - trajectory[ii-1])
}
return(trajectory)
}
ricker_model = function(N0, r, b, TimeSteps){
# initialize the trajectory vector and put in the first value
trajectory <- rep(0, TimeSteps)
trajectory[1] <- N0
for (ii in 2:TimeSteps){
trajectory[ii] <- r * trajectory[ii-1] *
exp(-b*trajectory[ii-1])
}
return(trajectory)
}
start_r <- 0.001
end_r <- 20
# Plot the Diagram (using base plotting because it is faster)
plot(0, 0, xlim=c(start_r-0.001, end_r+0.001),
ylim=c(-0.05,5), type="n", xlab="r", ylab="X")
# loop through some values for r
for (r in seq(start_r, end_r, 0.005)) {
# run the logistic map starting from an initial density
# of 0.5 and using the current growth rate
trajectory <- ricker_model(0.5, r, 1, 2500)
# just take the last tenth of the trajectory to find extrema
extrema <- trajectory %>%
tail(round(length(.) / 10)) %>%
get_extrema()
# plot one point for each extrema at the given growth rate
points(rep(r, length(extrema)), extrema, pch=".")
}
# The code plots all the maxima and minima of the timeseries once transient has
# elapsed. By doing this we are getting to know the behaviour of the model, since
# we are plotting how it responds after transient (invariably?, cyclicaly?,
# caotically?)
# For the ricker model we get chaos with r, and nothing interesting with b. b
# modulates the amplitude of chaos
logistic <- function(N, t, params){
with (as.list(c(N, parameters)), {
dndt = r*N*(1-N/K)
list(dndt)
})
}
logistic <- function(N, t, params){
with (as.list(c(N, parameters)), {
dndt = r*N*(1-N/K)
list(dndt)
})
}
N = 10
params = c(K = 15, r = 2)
t = seq(0, 20, length.out = 100)
out = ode(N, t, logistic, parms = params, method = 'radau')
library(deSolve)
logistic <- function(N, t, params){
with (as.list(c(N, parameters)), {
dndt = r*N*(1-N/K)
list(dndt)
})
}
N = 10
params = c(K = 15, r = 2)
t = seq(0, 20, length.out = 100)
out = ode(N, t, logistic, parms = params, method = 'radau')
logistic <- function(N, t, params){
with (as.list(c(N, params)), {
dndt = r*N*(1-N/K)
list(dndt)
})
}
N = 10
params = c(K = 15, r = 2)
t = seq(0, 20, length.out = 100)
out = ode(N, t, logistic, parms = params, method = 'radau')
plot(out)
logistic <- function(N, t, params){
with (as.list(c(N, params)), {
dndt = r*N*(1-N/K)
return(list(dndt))
})
}
N = 10
params = c(K = 15, r = 2)
t = seq(0, 20, length.out = 100)
out = ode(N, t, logistic, parms = params, method = 'radau')
plot(out)
out = ode(y = state, t, logistic, parms = params, method = 'radau')
plot(out)
state = c(N = 10)
params = c(K = 15, r = 2)
t = seq(0, 20, length.out = 100)
out = ode(y = state, t, logistic, parms = params, method = 'radau')
plot(out)
time <- seq(from=0, to=10, by = 0.01)
# parameters: a named vector
parameters <- c(r = 1.5, K = 10)
# initial conditions: also a named vector
state <- c(N = 0.1)
out = ode(y = state, times = time, func = logistic, parms = parameters, method = 'radau')
plot(out)
logistic <- function(t, N, params){
with (as.list(c(N, params)), {
dndt = r*N*(1-N/K)
return(list(dndt))
})
}
time <- seq(from=0, to=10, by = 0.01)
# parameters: a named vector
parameters <- c(r = 1.5, K = 10)
# initial conditions: also a named vector
state <- c(N = 0.1)
out = ode(y = state, times = time, func = logistic, parms = parameters, method = 'radau')
plot(out)
logistic <- function(t, N, params){
with (as.list(c(N, params)), {
dndt = r*N*(1-N/K)
return(list(dndt))
})
}
time <- seq(from=0, to=10, by = 0.01)
# parameters: a named vector
parameters <- c(r = 0.1, K = 1.5)
# initial conditions: also a named vector
state <- c(N = 1)
out = ode(y = state, times = time, func = logistic, parms = parameters, method = 'radau')
plot(out)
parameters = c(u = 0.1, v = 2, c = 0.1)
state = c(state = 1)
out = ode(y = state, times = time, func = allee, parms = parameters, method = 'radau')
plot(out)
allee <- function(t, state, params){
with (as.list(c(state, params)), {
dndt = (((u*state)/(v+state)) - c*state)*state
return(list(dndt))
})
}
out = ode(y = state, times = time, func = allee, parms = parameters, method = 'radau')
plot(out)
rmax <- 50 ## set maximum value for rate parameter
plot(-10, -10, xlim = c(0, rmax), ylim = c(0, 1000), xlab = "r", ylab = "X") ##Create empty plot
b <- 0.01 ##strength of density dependence
r <- seq(0, rmax, by = 0.05) ##set step size of r values to start at 0, then repeat step-wise in
n <- 100 ##set how many times the time series function will run, starting with the first value of r = 0
for (z in 2:length(r)) {
Results <- vector()
Results <- 10
for (i in 2:n) {
Results[i] <- Results[i - 1] * r[z] * exp(-b*Results[i - 1]) ## This is graphing N*=rN*e^(-b/N*) from my
##written equations
}
uval <- unique(Results[40:n]) ##run the population to n, then select unique values after steady state is reached
points(rep(r[z], length(uval)), uval, cex = 0.1, pch = 19)
}
debugSource("~/Desktop/coursework/Theoretical Ecology (TA)/bifurcation_gwen.R")
debugSource("~/Desktop/coursework/Theoretical Ecology (TA)/bifurcation_gwen.R")
Continue
Results
Results
install.packages("tidyverse")
#!/usr/bin/env r
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
source('http://bioconductor.org/biocLite.R')
source("http://bioconductor.org/biocLite.R")
####. Meta data ####
meta <- readRDS("data/meta.data.complete_24.05.22.RDS") #previously 5.28.21
meta <- meta %>%
mutate(Conhetero = ifelse(Seedling_Species==Adult_Species, "Con", "Hetero")) %>%
mutate(Conhetero = as.factor(Conhetero)) %>%
mutate(InOut = ifelse(grepl("_1_",Seedling_ID), "In", "Out"))%>%
mutate(Exclosure_Tag = if_else(Sample_Type=="Root", paste(Adult_tag, InOut, sep = "_"), as.character(Adult_tag)))
library(tidyverse)
library(ggplot2)
library(lsmeans)
library(dplyr)
library(lubridate)
library(lmerTest)
library(pbkrtest)
library(gridExtra)
library(phyloseq)
library(vegan)
library(multcomp)
library(MASS)
library(lme4)
library(devtools)
library(pairwiseAdonis)
library(VennDiagram)
install.packages("devtools")
library(devtools)
library(devtools)
install.packages("devtools")
devtools::install_github("hadley/devtools")
install.packages("devtools", dependencies = FALSE)
install.packages("pkgdown", dependencies = FALSE)
install.packages("ragg", dependencies = FALSE)
install.packages("systemfonts", dependencies = FALSE)
output.amf
#### PACKAGES ####
# for all analyses
library(tidyverse)
library(ggplot2)
library(lsmeans)
install.packages("lsmeans", dependencies = FALSE)
version
library(lsmeans)
install.packages("lsmeans", dependencies = FALSE)
"n" "pf"
2 0.655
3 0.4475
4 0.368
5 0.3515
6 0.369
7 0.3835
8 0.4305
n = c(2, 3, 4, 5, 6, 7, 8)
pf = c(0.655, 0.4475, 0.368, 0.369, 0.3835, 0.4305)
plot(n , pf)
pf = c(0.655, 0.4475, 0.368, 0.3515, 0.369, 0.3835, 0.4305)
plot(n , pf)
plot(n , pf, pch=2)
plot(n , pf, pch=20)
plot(n , pf, pch=20, ylim = c(0,1))
install.packages("Matrix")
install.packages("installr")
library(installr)
updateR()
setwd("~/Desktop/pert_hoi/code")
library(tidyverse)
data = read.table("../data/results_critical_radius_n_eq_all.csv")
data
