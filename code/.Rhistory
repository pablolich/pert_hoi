})
}
N = 10
params = c(K = 15, r = 2)
t = seq(0, 20, length.out = 100)
out = ode(N, t, logistic, parms = params, method = 'radau')
logistic <- function(N, t, params){
with (as.list(c(N, params)), {
dndt = r*N*(1-N/K)
list(dndt)
})
}
N = 10
params = c(K = 15, r = 2)
t = seq(0, 20, length.out = 100)
out = ode(N, t, logistic, parms = params, method = 'radau')
plot(out)
logistic <- function(N, t, params){
with (as.list(c(N, params)), {
dndt = r*N*(1-N/K)
return(list(dndt))
})
}
N = 10
params = c(K = 15, r = 2)
t = seq(0, 20, length.out = 100)
out = ode(N, t, logistic, parms = params, method = 'radau')
plot(out)
out = ode(y = state, t, logistic, parms = params, method = 'radau')
plot(out)
state = c(N = 10)
params = c(K = 15, r = 2)
t = seq(0, 20, length.out = 100)
out = ode(y = state, t, logistic, parms = params, method = 'radau')
plot(out)
time <- seq(from=0, to=10, by = 0.01)
# parameters: a named vector
parameters <- c(r = 1.5, K = 10)
# initial conditions: also a named vector
state <- c(N = 0.1)
out = ode(y = state, times = time, func = logistic, parms = parameters, method = 'radau')
plot(out)
logistic <- function(t, N, params){
with (as.list(c(N, params)), {
dndt = r*N*(1-N/K)
return(list(dndt))
})
}
time <- seq(from=0, to=10, by = 0.01)
# parameters: a named vector
parameters <- c(r = 1.5, K = 10)
# initial conditions: also a named vector
state <- c(N = 0.1)
out = ode(y = state, times = time, func = logistic, parms = parameters, method = 'radau')
plot(out)
logistic <- function(t, N, params){
with (as.list(c(N, params)), {
dndt = r*N*(1-N/K)
return(list(dndt))
})
}
time <- seq(from=0, to=10, by = 0.01)
# parameters: a named vector
parameters <- c(r = 0.1, K = 1.5)
# initial conditions: also a named vector
state <- c(N = 1)
out = ode(y = state, times = time, func = logistic, parms = parameters, method = 'radau')
plot(out)
parameters = c(u = 0.1, v = 2, c = 0.1)
state = c(state = 1)
out = ode(y = state, times = time, func = allee, parms = parameters, method = 'radau')
plot(out)
allee <- function(t, state, params){
with (as.list(c(state, params)), {
dndt = (((u*state)/(v+state)) - c*state)*state
return(list(dndt))
})
}
out = ode(y = state, times = time, func = allee, parms = parameters, method = 'radau')
plot(out)
rmax <- 50 ## set maximum value for rate parameter
plot(-10, -10, xlim = c(0, rmax), ylim = c(0, 1000), xlab = "r", ylab = "X") ##Create empty plot
b <- 0.01 ##strength of density dependence
r <- seq(0, rmax, by = 0.05) ##set step size of r values to start at 0, then repeat step-wise in
n <- 100 ##set how many times the time series function will run, starting with the first value of r = 0
for (z in 2:length(r)) {
Results <- vector()
Results <- 10
for (i in 2:n) {
Results[i] <- Results[i - 1] * r[z] * exp(-b*Results[i - 1]) ## This is graphing N*=rN*e^(-b/N*) from my
##written equations
}
uval <- unique(Results[40:n]) ##run the population to n, then select unique values after steady state is reached
points(rep(r[z], length(uval)), uval, cex = 0.1, pch = 19)
}
debugSource("~/Desktop/coursework/Theoretical Ecology (TA)/bifurcation_gwen.R")
debugSource("~/Desktop/coursework/Theoretical Ecology (TA)/bifurcation_gwen.R")
Continue
Results
Results
install.packages("tidyverse")
#!/usr/bin/env r
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
source('http://bioconductor.org/biocLite.R')
source("http://bioconductor.org/biocLite.R")
####. Meta data ####
meta <- readRDS("data/meta.data.complete_24.05.22.RDS") #previously 5.28.21
meta <- meta %>%
mutate(Conhetero = ifelse(Seedling_Species==Adult_Species, "Con", "Hetero")) %>%
mutate(Conhetero = as.factor(Conhetero)) %>%
mutate(InOut = ifelse(grepl("_1_",Seedling_ID), "In", "Out"))%>%
mutate(Exclosure_Tag = if_else(Sample_Type=="Root", paste(Adult_tag, InOut, sep = "_"), as.character(Adult_tag)))
library(tidyverse)
library(ggplot2)
library(lsmeans)
library(dplyr)
library(lubridate)
library(lmerTest)
library(pbkrtest)
library(gridExtra)
library(phyloseq)
library(vegan)
library(multcomp)
library(MASS)
library(lme4)
library(devtools)
library(pairwiseAdonis)
library(VennDiagram)
install.packages("devtools")
library(devtools)
library(devtools)
install.packages("devtools")
devtools::install_github("hadley/devtools")
install.packages("devtools", dependencies = FALSE)
install.packages("pkgdown", dependencies = FALSE)
install.packages("ragg", dependencies = FALSE)
install.packages("systemfonts", dependencies = FALSE)
output.amf
#### PACKAGES ####
# for all analyses
library(tidyverse)
library(ggplot2)
library(lsmeans)
install.packages("lsmeans", dependencies = FALSE)
version
library(lsmeans)
install.packages("lsmeans", dependencies = FALSE)
"n" "pf"
2 0.655
3 0.4475
4 0.368
5 0.3515
6 0.369
7 0.3835
8 0.4305
n = c(2, 3, 4, 5, 6, 7, 8)
pf = c(0.655, 0.4475, 0.368, 0.369, 0.3835, 0.4305)
plot(n , pf)
pf = c(0.655, 0.4475, 0.368, 0.3515, 0.369, 0.3835, 0.4305)
plot(n , pf)
plot(n , pf, pch=2)
plot(n , pf, pch=20)
plot(n , pf, pch=20, ylim = c(0,1))
install.packages("Matrix")
install.packages("installr")
library(installr)
updateR()
library("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library("tidyverse")
rm(list = ls())
library(mvtnorm)
source("../build_matrices/build_matrices.R")
library(tidyverse)
dat1 = read.table("../data/feasibility_boundary_radius_1.csv")
setwd("~/Desktop/pert_hoi/code")
library(tidyverse)
dat1 = read.table("../data/feasibility_boundary_radius_1.csv")
dat2 = read.table("../data/feasibility_boundary_radius_2.csv")
dat3 = read.table("../data/feasibility_boundary_radius_3.csv")
dat = rbind(dat1, dat2, dat3)
colnames(dat) = c("sim", "n", "alpha", "rmax")
dataplot = dat %>%
group_by(n, alpha) %>%
summarise(rmean = median(rmax))
ggplot(dataplot)+
geom_point(aes(x = alpha, y = rmean,
color = as.factor(n)))
expand.grid(nvals, distvals, rhovals, skewvals)
#set values for each parameter
nvals = c(50, 100)
distvals = c("normal", "beta", "discrete")
rhovals = c(-1, 0, 1)
skewvals = c("low", 0, "high")
nsim = 2
skewvals = c("low", 0, "high")
expand.grid(nvals, distvals, rhovals, skewvals)
rep(parvals, each = 2)
#build rows of parameter values
parvals = expand.grid(nvals, distvals, rhovals)
rep(parvals, each = 2)
parvals %>% slice(rep(1:n(), each = 2))
#build rows of parameter values
parvals = expand.grid(nvals, distvals, rhovals, skewvals)
parvals %>% slice(rep(1:n(), each = 2))
#build rows of parameter values
parvals = expand.grid(nvals, distvals, rhovals, skewvals, simvals)
nsim = 2
simvals = seq(1, nsim)
#build rows of parameter values
parvals = expand.grid(nvals, distvals, rhovals, skewvals, simvals)
parvals
#build rows of parameter values
parvals = expand.grid(simvals, nvals, distvals, rhovals, skewvals)
parvals
colnames(parvals) = c("sim", "n", "dist", "rho", "skew")
#build rows of parameter values
parvals = expand.grid(simvals, nvals, distvals, rhovals, skewvals)
parvals
colnames(parvals) = c("sim", "n", "dist", "rho", "skew")
parvals
#build rows of parameter values
parvals = expand.grid(simvals, nvals, rhovals, skewvals, distvals)
colnames(parvals) = c("sim", "n", "rho", "skew", "dist")
parvals
#build rows of parameter values
parvals = expand.grid(nvals, rhovals, skewvals, distvals,simvals)
colnames(parvals) = c("n", "rho", "skew", "dist", "sim")
parvals
#build rows of parameter values
parvals = expand.grid(rhovals, skewvals, distvals, simvals, nvals)
colnames(parvals) = c("rho", "skew", "dist", "sim", "n")
parvals
#parvalskewvals =
parvals %>%
mutate(skewvals = categori2numeric(skew, dist))
#function to put numerical values to the skewness
categori2numeric = function(category, distribution){
if (distribution == "normal"){
values =  return(c(-5, 0, 5))
if (category == "low"){
return(values[1])
}
else if (category == 0){
return(values[2])
}
else if (category == "high"){
return(values[3])
}
else{
print("not a valid category")
return(NA)
}
}
else if (distribution == "beta"){
values = c(1/1.05, 0, 1.05)
if (category == "low"){
return(values[1])
}
else if (category == 0){
return(values[2])
}
else if (category == "high"){
return(values[3])
}
else{
print("not a valid category")
return(NA)
}
}
else if (distribution == "discrete"){
values = c(3/4, 0, 4/3)
if (category == "low"){
return(values[1])
}
else if (category == 0){
return(values[2])
}
else if (category == "high"){
return(values[3])
}
else{
print("not a valid category")
return(NA)
}
}
else {
print("not a valid distribution")
return(NA)
}
}
#parvalskewvals =
parvals %>%
mutate(skewvals = categori2numeric(skew, dist))
parvals
#parvalskewvals =
parvals %>%
group_by(rho, skew, dist, sim) %>%
mutate(skewvals = categori2numeric(skew, dist))
debugSource("~/Desktop/feas_stab_comp/code/run_simulations/which_simulations.R", echo=TRUE)
category
#parvalskewvals =
parvals %>%
group_by(rho, skew, dist, sim, n) %>%
mutate(skewvals = categori2numeric(skew, dist))
source("~/Desktop/feas_stab_comp/code/run_simulations/which_simulations.R", echo=TRUE)
debugSource("~/Desktop/feas_stab_comp/code/run_simulations/which_simulations.R", echo=TRUE)
category
dist
print(dist)
debugSource("~/Desktop/feas_stab_comp/code/run_simulations/which_simulations.R", echo=TRUE)
distribution
cat2num_vectorized = function(distvec, skewvec, nrows){
#initialize vector of skewvalues
skewvals = rep(0, nrows)
for (row in 1:nrows){
skewvals[row] = categori2numeric(distvec[row], skewvec[row])
}
return(skewvals)
}
#function to put numerical values to the skewness
categori2numeric = function(distribution, category){
if (distribution == "normal"){
values =  return(c(-5, 0, 5))
if (category == "low"){
return(values[1])
}
else if (category == 0){
return(values[2])
}
else if (category == "high"){
return(values[3])
}
else{
print("not a valid category")
return(NA)
}
}
else if (distribution == "beta"){
values = c(1/1.05, 0, 1.05)
if (category == "low"){
return(values[1])
}
else if (category == 0){
return(values[2])
}
else if (category == "high"){
return(values[3])
}
else{
print("not a valid category")
return(NA)
}
}
else if (distribution == "discrete"){
values = c(3/4, 0, 4/3)
if (category == "low"){
return(values[1])
}
else if (category == 0){
return(values[2])
}
else if (category == "high"){
return(values[3])
}
else{
print("not a valid category")
return(NA)
}
}
else {
print("not a valid distribution")
return(NA)
}
}
cat2num_vectorized = function(distvec, skewvec, nrows){
#initialize vector of skewvalues
skewvals = rep(0, nrows)
for (row in 1:nrows){
skewvals[row] = categori2numeric(distvec[row], skewvec[row])
}
return(skewvals)
}
#set values for each parameter
nvals = c(50, 100)
distvals = c("normal", "beta", "discrete")
rhovals = c(-1, 0, 1)
skewvals = c("low", 0, "high")
nsim = 2
simvals = seq(1, nsim)
#build rows of parameter values
parvals = expand.grid(rhovals, skewvals, distvals, simvals, nvals)
colnames(parvals) = c("rho", "skew", "distribution", "sim", "n")
nrows = length(distvec)
#initialize vector of skewvalues
skewvals = rep(0, nrows)
for (row in 1:nrows){
skewvals[row] = categori2numeric(distvec[row], skewvec[row])
}
return(skewvals)
cat2num_vectorized = function(distvec, skewvec){
nrows = length(distvec)
#initialize vector of skewvalues
skewvals = rep(0, nrows)
for (row in 1:nrows){
skewvals[row] = categori2numeric(distvec[row], skewvec[row])
}
return(skewvals)
}
#function to put numerical values to the skewness
categori2numeric = function(distribution, category){
if (distribution == "normal"){
values =  return(c(-5, 0, 5))
if (category == "low"){
return(values[1])
}
else if (category == 0){
return(values[2])
}
else if (category == "high"){
return(values[3])
}
else{
print("not a valid category")
return(NA)
}
}
else if (distribution == "beta"){
values = c(1/1.05, 0, 1.05)
if (category == "low"){
return(values[1])
}
else if (category == 0){
return(values[2])
}
else if (category == "high"){
return(values[3])
}
else{
print("not a valid category")
return(NA)
}
}
else if (distribution == "discrete"){
values = c(3/4, 0, 4/3)
if (category == "low"){
return(values[1])
}
else if (category == 0){
return(values[2])
}
else if (category == "high"){
return(values[3])
}
else{
print("not a valid category")
return(NA)
}
}
else {
print("not a valid distribution")
return(NA)
}
}
#set values for each parameter
nvals = c(50, 100)
distvals = c("normal", "beta", "discrete")
rhovals = c(-1, 0, 1)
skewvals = c("low", 0, "high")
nsim = 2
simvals = seq(1, nsim)
#build rows of parameter values
parvals = expand.grid(rhovals, skewvals, distvals, simvals, nvals)
colnames(parvals) = c("rho", "skew", "distribution", "sim", "n")
#parvalskewvals =
parvals %>%
group_by(rho, skew, distribution, sim, n) %>%
mutate(skewvals = cat2num_vectorized(skew, distribution))
debugSource("~/Desktop/feas_stab_comp/code/run_simulations/which_simulations.R", echo=TRUE)
distve[row]
distvec[row]
skewvec[row]
debugSource("~/Desktop/feas_stab_comp/code/run_simulations/which_simulations.R", echo=TRUE)
distvec
distvec[row]
skewvec[row]
as.character(skewvec[row])
debugSource("~/Desktop/feas_stab_comp/code/run_simulations/which_simulations.R", echo=TRUE)
distvec[row]
as.character(distvec[row]
)
source("~/Desktop/feas_stab_comp/code/run_simulations/which_simulations.R", echo=TRUE)
source("~/Desktop/feas_stab_comp/code/run_simulations/which_simulations.R", echo=TRUE)
debugSource("~/Desktop/feas_stab_comp/code/run_simulations/which_simulations.R", echo=TRUE)
debugSource("~/Desktop/feas_stab_comp/code/run_simulations/which_simulations.R", echo=TRUE)
debugSource("~/Desktop/feas_stab_comp/code/run_simulations/which_simulations.R", echo=TRUE)
distribution
debugSource("~/Desktop/feas_stab_comp/code/run_simulations/which_simulations.R", echo=TRUE)
distribution
skew
category
source("~/Desktop/feas_stab_comp/code/run_simulations/which_simulations.R", echo=TRUE)
dplyr::last_dplyr_warnings()
skewvals
